// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Modeling;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client.ClientProxying;
using Dignite.Abp.Identity;
using Volo.Abp.Identity;

// ReSharper disable once CheckNamespace
namespace Dignite.Abp.Identity.ClientProxies;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IOrganizationUnitAppService), typeof(OrganizationUnitClientProxy))]
public partial class OrganizationUnitClientProxy : ClientProxyBase<IOrganizationUnitAppService>, IOrganizationUnitAppService
{
    public virtual async Task<OrganizationUnitDto> CreateAsync(OrganizationUnitCreateDto input)
    {
        return await RequestAsync<OrganizationUnitDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(OrganizationUnitCreateDto), input }
        });
    }

    public virtual async Task<OrganizationUnitDto> UpdateAsync(Guid id, OrganizationUnitUpdateDto input)
    {
        return await RequestAsync<OrganizationUnitDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(OrganizationUnitUpdateDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<OrganizationUnitDto> MoveAsync(Guid id, OrganizationUnitMoveInput input)
    {
        return await RequestAsync<OrganizationUnitDto>(nameof(MoveAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(OrganizationUnitMoveInput), input }
        });
    }

    public virtual async Task<ListResultDto<IdentityRoleDto>> GetRolesAsync(Guid id)
    {
        return await RequestAsync<ListResultDto<IdentityRoleDto>>(nameof(GetRolesAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<ListResultDto<IdentityRoleDto>> GetAvailableRolesAsync(Guid? parentId)
    {
        return await RequestAsync<ListResultDto<IdentityRoleDto>>(nameof(GetAvailableRolesAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid?), parentId }
        });
    }

    public virtual async Task<OrganizationUnitDto> GetAsync(Guid id)
    {
        return await RequestAsync<OrganizationUnitDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<OrganizationUnitDto> FindByCodeAsync(string code)
    {
        return await RequestAsync<OrganizationUnitDto>(nameof(FindByCodeAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), code }
        });
    }

    public virtual async Task<ListResultDto<OrganizationUnitDto>> GetAuthorizedAsync()
    {
        return await RequestAsync<ListResultDto<OrganizationUnitDto>>(nameof(GetAuthorizedAsync));
    }

    public virtual async Task<PagedResultDto<OrganizationUnitDto>> GetListAsync(GetOrganizationUnitsInput input)
    {
        return await RequestAsync<PagedResultDto<OrganizationUnitDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetOrganizationUnitsInput), input }
        });
    }

    public virtual async Task AddMembersAsync(Guid id, Guid[] userIds)
    {
        await RequestAsync(nameof(AddMembersAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(Guid[]), userIds }
        });
    }

    public virtual async Task RemoveMembersAsync(Guid id, Guid[] userIds)
    {
        await RequestAsync(nameof(RemoveMembersAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(Guid[]), userIds }
        });
    }

    public virtual async Task<PagedResultDto<IdentityUserDto>> GetMembersAsync(Guid id, GetOrganizationUnitMembersInput input)
    {
        return await RequestAsync<PagedResultDto<IdentityUserDto>>(nameof(GetMembersAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(GetOrganizationUnitMembersInput), input }
        });
    }
}
