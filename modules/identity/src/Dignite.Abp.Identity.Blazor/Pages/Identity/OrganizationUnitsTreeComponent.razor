@using Dignite.Abp.Identity
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Volo.Abp.Application.Dtos
@using Dignite.Abp.Identity.Localization
@using IdentityRoleDto=Dignite.Abp.Identity.IdentityRoleDto
@inject AbpBlazorMessageLocalizerHelper<DigniteAbpIdentityResource> LH
@inject IOrganizationUnitAppService OrganizationUnitAppService
@inherits AbpCrudPageBase<IOrganizationUnitAppService, OrganizationUnitDto, Guid, GetOrganizationUnitsInput, OrganizationUnitCreateDto, OrganizationUnitUpdateDto>

@code {
    [Parameter]public EventCallback<OrganizationUnitDto> OnNodeClick { get; set; }

    private IList<OrganizationUnitDto> AllOrganizationUnits = new List<OrganizationUnitDto>();
    private IReadOnlyList<IdentityRoleDto> AvailableRoles;
    private OrganizationUnitDto CurrentNode;
    private OrganizationUnitDto DraggingNode;
    private OrganizationUnitDto DragOverNode;
    private OrganizationUnitMovePosition? MovePosition;
    private IList<OrganizationUnitDto> ExpandedNodes = new List<OrganizationUnitDto>();
    private bool HasSuperAuthorizationPermission = false;

    public OrganizationUnitsTreeComponent()
    {
        LocalizationResource = typeof(DigniteAbpIdentityResource);
        AvailableRoles = new List<IdentityRoleDto>();

        CreatePolicyName = OrganizationUnitPermissions.OrganizationUnits.Create;
        UpdatePolicyName = OrganizationUnitPermissions.OrganizationUnits.Update;
        DeletePolicyName = OrganizationUnitPermissions.OrganizationUnits.Delete;

    }

    protected override async Task OnInitializedAsync()
    {
        HasSuperAuthorizationPermission = await AuthorizationService.IsGrantedAsync(OrganizationUnitPermissions.OrganizationUnits.SuperAuthorization);
        await GetEntitiesAsync();
        AllOrganizationUnits = Entities.ToList();
        await base.OnInitializedAsync();
    }

    protected override async Task GetEntitiesAsync()
    {
        try
        {
            var result = await AppService.GetAuthorizedAsync();
            foreach (var ou in result.Items)
            {
                var children = await AppService.GetListAsync(new GetOrganizationUnitsInput()
                    {
                        ParentId = ou.Id,
                        Recursive = false
                    });
                ou.HaveChildren(children.Items.Any());
            }
            Entities = result.Items;
            TotalCount = (int?)result.Items.Count;
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }

    async Task OnSelectNodeChanged(OrganizationUnitDto args)
    {
        CurrentNode = args;
        await OnNodeClick.InvokeAsync(CurrentNode);
    }


    async Task OnExpandChanged(IList<OrganizationUnitDto> args)
    {
        var expandedNode = args.LastOrDefault();
        if(expandedNode!=null && expandedNode.HasChild && !expandedNode.Children.Any())
        {
            var children = (await OrganizationUnitAppService.GetListAsync(new GetOrganizationUnitsInput
            {
                ParentId=expandedNode.Id
            })).Items;

            //
            expandedNode.Children.Clear();

            //
            foreach (var ou in children)
            {
                expandedNode.AddChild(ou);
            }
        }
    }


    async Task OnAddRootUnitClicked()
    {
        await OpenCreateModalAsync();
        NewEntity.ParentId = null;
    }

    async Task OnAddSubUnitClicked( OrganizationUnitDto node)
    {
        await OpenCreateModalAsync();    
        NewEntity.ParentId = node.Id;    
    }

    async Task OnEditUnitClicked( OrganizationUnitDto node)
    {
        await OpenEditModalAsync(node);
    }


    protected override async Task OpenCreateModalAsync()
    {
        await base.OpenCreateModalAsync();
        AvailableRoles = (await OrganizationUnitAppService.GetAvailableRolesAsync(NewEntity.ParentId)).Items;
    }


    protected override async Task OpenEditModalAsync(OrganizationUnitDto entity)
    {
        await base.OpenEditModalAsync(entity);
        AvailableRoles = (await OrganizationUnitAppService.GetAvailableRolesAsync(entity.ParentId)).Items;

        var ouRoles = await OrganizationUnitAppService.GetRolesAsync(entity.Id);
        EditingEntity.RoleIds = ouRoles.Items.Select(r=>r.Id).ToList();
    }

    protected override async Task OnCreatedEntityAsync()
    {
        if (!NewEntity.ParentId.HasValue) //add root unit
        {
            await GetEntitiesAsync();
        }
        else
        {
            var currentNode = AllOrganizationUnits.FindById(NewEntity.ParentId.Value);

            var children = (await OrganizationUnitAppService.GetListAsync(new GetOrganizationUnitsInput
                {
                    ParentId = currentNode.Id
                })).Items;

            currentNode.Children.Clear();
            foreach (var ou in children)
            {
                currentNode.AddChild(ou);
            }

            //Expand current node
            if (!ExpandedNodes.Any(n => n.Id == currentNode.Id))
            {
                ExpandedNodes.Add(currentNode);
            }
        }

        await InvokeAsync(CreateModal.Hide);
    }

    protected override async Task OnUpdatedEntityAsync()
    {
        var currentNode = AllOrganizationUnits.FindById(EditingEntityId);
        currentNode.DisplayName =EditingEntity.DisplayName;
        currentNode.IsActive = EditingEntity.IsActive;

        await InvokeAsync(EditModal.Hide);
    }

    protected async override Task DeleteEntityAsync (OrganizationUnitDto node)
    {
        if (await Message.Confirm("你确认删除该机构吗?", "Confirmation"))
        {
            //执行删除
            await base.DeleteEntityAsync(node);      

            //
            if (node.ParentId.HasValue)
            {
                var parent = AllOrganizationUnits.FindById(node.ParentId.Value);
                parent.Remove(node);
                CurrentNode = parent;
            }
            else
            {
                await GetEntitiesAsync();  
                CurrentNode = null;      
            }
        }
    }

    protected override async Task OnDeletedEntityAsync()
    {        
        await InvokeAsync(StateHasChanged);
        await Notify.Success(L["SuccessfullyDeleted"]);
    }

    void DragEnter(OrganizationUnitDto item,OrganizationUnitMovePosition position)
    {
        DragOverNode = item;
        MovePosition = position;
    }    


    int GetIndex(OrganizationUnitDto item)
    {
        if (item.ParentId.HasValue)
        {
            return AllOrganizationUnits.FindById(item.ParentId.Value).Children.FindIndex(ou => ou.Id == item.Id);
        }
        else
        {
            return AllOrganizationUnits.ToList().FindIndex(ou => ou.Id == item.Id);
        }
    }

    void Drop(OrganizationUnitDto item,OrganizationUnitMovePosition position)
    {
        if (item.Id == DraggingNode.Id)
            return;

        var index = GetIndex(item);

        OrganizationUnitDto targetParent = null;
        if (item.ParentId.HasValue)
        {
            targetParent = AllOrganizationUnits.FindById(item.ParentId.Value);
        }
        AllOrganizationUnits.Move(DraggingNode, targetParent, index);

        StateHasChanged();
    }
    
    enum OrganizationUnitMovePosition
    {
        Top,
        In,
        Bottom
    }
}

@if (HasCreatePermission && HasSuperAuthorizationPermission)
{
    <Blazorise.Button Color="Blazorise.Color.Primary" Clicked="@OnAddRootUnitClicked">@L["NewRootUnit"]</Blazorise.Button>
}
<div ondragover="event.preventDefault();">
<TreeView TNode="OrganizationUnitDto" Nodes="AllOrganizationUnits"
        GetChildNodes="x => x.Children"
        HasChildNodes="x => x.HasChild"
        ExpandedNodes="@ExpandedNodes"
        ExpandedNodesChanged="OnExpandChanged"
        SelectedNode="@CurrentNode"
        SelectedNodeChanged="OnSelectNodeChanged">
        <NodeContent>         
            <div draggable="true" @key="@(context.Id)"
            @ondragstart="() => DraggingNode = context"
		    @ondragend="()=> DraggingNode = null"
            @ondrag="@(()=> DraggingNode=context)" style="position:relative; margin-bottom:10px;">
            <Dropdown>
                <Button Color="Color.Light" Size="Size.Small">@context.DisplayName</Button>
                <DropdownToggle Color="Color.Light" Size="Size.Small" Split />
                <DropdownMenu>
                    <DropdownItem Disabled="@(!HasCreatePermission)" Clicked="@(e=>OnAddSubUnitClicked(context))">@L["NewSubUnit"]</DropdownItem>
                    <DropdownItem Disabled="@(!HasUpdatePermission)" Clicked="@(e=>OnEditUnitClicked(context))">@L["Edit"]</DropdownItem>
                    <DropdownDivider />
                    <DropdownItem Disabled="@(!HasDeletePermission)" Clicked="@(e=>DeleteEntityAsync(context))">@L["Delete"]</DropdownItem>
                </DropdownMenu>
            </Dropdown>
                @if (DraggingNode is not null)
			    {
				    <div style="top:0px;left:0px;position:absolute;width:100%; height:100%; 
                     @(DragOverNode!=null && DraggingNode.ParentId!=DragOverNode.Id && MovePosition== OrganizationUnitMovePosition.In &&context.Id==DragOverNode.Id?"border:solid 1px #d5d5d5; background-color:rgba(255, 255, 255, 0.4);":"")"
			         @ondrop="@(()=> Drop(context,OrganizationUnitMovePosition.In))"
			         @ondragenter="@(()=>DragEnter(context, OrganizationUnitMovePosition.In))"
                     >
				    </div>

				    <div style="bottom:-10px;left:0px;position:absolute;width:100%; height:7px; 
                     @(DragOverNode!=null && DraggingNode.ParentId!=DragOverNode.Id && DragOverNode.Id!=DraggingNode.Id && MovePosition== OrganizationUnitMovePosition.Bottom &&context.Id==DragOverNode.Id?" border-top:solid 3px red;":"")"
			         @ondrop="@(()=> Drop(context,OrganizationUnitMovePosition.Bottom))"
			         @ondragenter="@(()=>DragEnter(context, OrganizationUnitMovePosition.Bottom))"
                     >
				    </div>
			    }
            </div>
        </NodeContent>
</TreeView>
</div>


@* ************************* CREATE MODAL ************************* *@
@if (HasCreatePermission)
{
    <Blazorise.Modal @ref="CreateModal" Closing="@ClosingCreateModal">
    <Blazorise.ModalContent Centered="true">
        <Blazorise.Form>
            <Blazorise.ModalHeader>
                <Blazorise.ModalTitle>@L["NewSubUnit"]</Blazorise.ModalTitle>
                <Blazorise.CloseButton Clicked="CloseCreateModalAsync"/>
            </Blazorise.ModalHeader>
            <Blazorise.ModalBody>
                <Blazorise.Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <CreateOrUpdateOrganizationUnitFormShared Data="@NewEntity" AvailableRoles="@AvailableRoles" LH="@LH" L="@L"></CreateOrUpdateOrganizationUnitFormShared>
                </Blazorise.Validations>
            </Blazorise.ModalBody>
            <Blazorise.ModalFooter>
                <Blazorise.Button Color="@Blazorise.Color.Secondary" Clicked="CloseCreateModalAsync">@L["Cancel"]</Blazorise.Button>
                <SubmitButton Clicked="@CreateEntityAsync"/>
            </Blazorise.ModalFooter>
        </Blazorise.Form>
    </Blazorise.ModalContent>
    </Blazorise.Modal>
}

@* ************************* EDIT MODAL ************************* *@
@if (HasUpdatePermission)
{
    <Blazorise.Modal @ref="EditModal" Closing="@ClosingEditModal">
    <Blazorise.ModalContent Centered="true">
        <Blazorise.Form>
            <Blazorise.ModalHeader>
                <Blazorise.ModalTitle>@L["Edit"]</Blazorise.ModalTitle>
                <Blazorise.CloseButton Clicked="CloseEditModalAsync"/>
            </Blazorise.ModalHeader>
            <Blazorise.ModalBody>
                <Blazorise.Validations @ref="@EditValidationsRef" Model="@EditingEntity" ValidateOnLoad="false">
                    <input type="hidden" name="ConcurrencyStamp" @bind-value="EditingEntity.ConcurrencyStamp"/>
                    <CreateOrUpdateOrganizationUnitFormShared Data="@EditingEntity"  AvailableRoles="@AvailableRoles" LH="@LH" L="@L"></CreateOrUpdateOrganizationUnitFormShared>
                </Blazorise.Validations>
            </Blazorise.ModalBody>
            <Blazorise.ModalFooter>
                <Blazorise.Button Color="Blazorise.Color.Secondary" Clicked="CloseEditModalAsync">@L["Cancel"]</Blazorise.Button>
                <SubmitButton Clicked="@UpdateEntityAsync"/>
            </Blazorise.ModalFooter>
        </Blazorise.Form>
    </Blazorise.ModalContent>
</Blazorise.Modal>
}
