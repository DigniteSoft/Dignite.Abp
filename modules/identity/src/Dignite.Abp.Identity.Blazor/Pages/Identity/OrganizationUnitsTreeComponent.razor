@using Dignite.Abp.Identity
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Volo.Abp.Application.Dtos
@using Dignite.Abp.Identity.Localization
@using IdentityRoleDto=Dignite.Abp.Identity.IdentityRoleDto
@inject AbpBlazorMessageLocalizerHelper<DigniteAbpIdentityResource> LH
@inject IOrganizationUnitAppService OrganizationUnitAppService
@inherits AbpCrudPageBase<IOrganizationUnitAppService, OrganizationUnitDto, Guid, GetOrganizationUnitsInput, OrganizationUnitCreateDto, OrganizationUnitUpdateDto>

@code {
    [Parameter]public EventCallback<OrganizationUnitDto> OnNodeClick { get; set; }

    private IReadOnlyList<IdentityRoleDto> AvailableRoles;
    private OrganizationUnitDto SelectedNode;
    private IList<OrganizationUnitDto> ExpandedNodes = new List<OrganizationUnitDto>();
    private bool HasSuperAuthorizationPermission = false;

    public OrganizationUnitsTreeComponent()
    {
        LocalizationResource = typeof(DigniteAbpIdentityResource);
        AvailableRoles = new List<IdentityRoleDto>();

        CreatePolicyName = OrganizationUnitPermissions.OrganizationUnits.Create;
        UpdatePolicyName = OrganizationUnitPermissions.OrganizationUnits.Update;
        DeletePolicyName = OrganizationUnitPermissions.OrganizationUnits.Delete;

    }

    protected override async Task OnInitializedAsync()
    {
        HasSuperAuthorizationPermission = await AuthorizationService.IsGrantedAsync(OrganizationUnitPermissions.OrganizationUnits.SuperAuthorization);
        await GetEntitiesAsync();
        await base.OnInitializedAsync();
    }

    protected override async Task GetEntitiesAsync()
    {
        try
        {
            var result = await AppService.GetAuthorizedAsync();
            foreach (var ou in result.Items)
            {
                var children = await AppService.GetListAsync(new GetOrganizationUnitsInput()
                    {
                        ParentId = ou.Id,
                        Recursive = false
                    });
                ou.HaveChildren(children.Items.Any());
            }
            Entities = result.Items;
            TotalCount = (int?)result.Items.Count;
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }



    async Task OnExpandChanged(IList<OrganizationUnitDto> args)
    {
        var expandedNode = args.LastOrDefault();
        if(expandedNode!=null && expandedNode.HasChild && !expandedNode.Children.Any())
        {
            var children = (await OrganizationUnitAppService.GetListAsync(new GetOrganizationUnitsInput
            {
                ParentId=expandedNode.Id
            })).Items;

            //
            expandedNode.Children.Clear();

            //
            foreach (var ou in children)
            {
                expandedNode.AddChild(ou);
            }
        }
    }

    async Task OnSelectNodeChanged(OrganizationUnitDto args)
    {
        SelectedNode = args;
    }



    async Task OnAddRootUnitClicked()
    {
        SelectedNode = null;
        await OpenCreateModalAsync();
    }

    async Task OnAddSubUnitClicked(MouseEventArgs e, OrganizationUnitDto node)
    {
        SelectedNode = node;
        await OpenCreateModalAsync();        
    }

    async Task OnEditUnitClicked(MouseEventArgs e, OrganizationUnitDto node)
    {
        SelectedNode = node;
        await OpenEditModalAsync(node);
    }

    async Task OnDeleteUnitClicked(MouseEventArgs e, OrganizationUnitDto node)
    {
        if (await Message.Confirm("你确认删除该机构吗?", "Confirmation"))
        {
            SelectedNode = node;
            await DeleteEntityAsync(node);
        }
    }

    protected override async Task OpenCreateModalAsync()
    {
        await base.OpenCreateModalAsync();

        NewEntity.ParentId = SelectedNode ==null?null:SelectedNode.Id;
        AvailableRoles = (await OrganizationUnitAppService.GetAvailableRolesAsync(NewEntity.ParentId)).Items;
    }


    protected override async Task OpenEditModalAsync(OrganizationUnitDto entity)
    {
        await base.OpenEditModalAsync(entity);
        AvailableRoles = (await OrganizationUnitAppService.GetAvailableRolesAsync(entity.ParentId)).Items;
        
        var ouRoles = await OrganizationUnitAppService.GetRolesAsync(entity.Id);
        EditingEntity.RoleIds = ouRoles.Items.Select(r=>r.Id).ToList();
    }

    protected override async Task OnCreatedEntityAsync()
    {
        if (SelectedNode == null) //add root unit
        {
            await GetEntitiesAsync();
        }
        else
        {                        
            var children = (await OrganizationUnitAppService.GetListAsync(new GetOrganizationUnitsInput
            {
                ParentId=SelectedNode.Id
            })).Items;

            SelectedNode.Children.Clear();
            foreach (var ou in children)
            {
                SelectedNode.AddChild(ou);
            }

            /*
            //expand node
            if (!SelectedNode.Expanded)
            {
                SelectedNode.Expand(true);
            }
            */
        }

        await InvokeAsync(CreateModal.Hide);
    }

    protected override async Task OnUpdatedEntityAsync()
    {
        SelectedNode.DisplayName =EditingEntity.DisplayName;
        SelectedNode.IsActive = EditingEntity.IsActive;

        await InvokeAsync(EditModal.Hide);
    }

    protected override async Task UpdateGetListInputAsync()
    {
        GetListInput.ParentId = SelectedNode == null ? null : SelectedNode.Id;
        await base.UpdateGetListInputAsync();
    }

    protected override Task OnDeletedEntityAsync()
    {
        //SelectedNode.Remove();

        return Task.CompletedTask;
    }
}

@if (HasCreatePermission && HasSuperAuthorizationPermission)
{
    <Blazorise.Button Color="Blazorise.Color.Primary" Clicked="@OnAddRootUnitClicked">@L["NewRootUnit"]</Blazorise.Button>
}
<TreeView TNode="OrganizationUnitDto" Nodes="Entities"
        GetChildNodes="x => x.Children"
        HasChildNodes="x => x.HasChild"
        ExpandedNodes="@ExpandedNodes"
        ExpandedNodesChanged="OnExpandChanged"
        SelectedNode="@SelectedNode"
        SelectedNodeChanged="OnSelectNodeChanged">
        <NodeContent>
            @context.DisplayName
        </NodeContent>
</TreeView>



@* ************************* CREATE MODAL ************************* *@
@if (HasCreatePermission)
{
    <Blazorise.Modal @ref="CreateModal" Closing="@ClosingCreateModal">
    <Blazorise.ModalContent Centered="true">
        <Blazorise.Form>
            <Blazorise.ModalHeader>
                <Blazorise.ModalTitle>@L["NewSubUnit"]</Blazorise.ModalTitle>
                <Blazorise.CloseButton Clicked="CloseCreateModalAsync"/>
            </Blazorise.ModalHeader>
            <Blazorise.ModalBody>
                <Blazorise.Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <CreateOrUpdateOrganizationUnitFormShared Data="@NewEntity" AvailableRoles="@AvailableRoles" LH="@LH" L="@L"></CreateOrUpdateOrganizationUnitFormShared>
                </Blazorise.Validations>
            </Blazorise.ModalBody>
            <Blazorise.ModalFooter>
                <Blazorise.Button Color="@Blazorise.Color.Secondary" Clicked="CloseCreateModalAsync">@L["Cancel"]</Blazorise.Button>
                <SubmitButton Clicked="@CreateEntityAsync"/>
            </Blazorise.ModalFooter>
        </Blazorise.Form>
    </Blazorise.ModalContent>
    </Blazorise.Modal>
}

@* ************************* EDIT MODAL ************************* *@
@if (HasUpdatePermission)
{
    <Blazorise.Modal @ref="EditModal" Closing="@ClosingEditModal">
    <Blazorise.ModalContent Centered="true">
        <Blazorise.Form>
            <Blazorise.ModalHeader>
                <Blazorise.ModalTitle>@L["Edit"]</Blazorise.ModalTitle>
                <Blazorise.CloseButton Clicked="CloseEditModalAsync"/>
            </Blazorise.ModalHeader>
            <Blazorise.ModalBody>
                <Blazorise.Validations @ref="@EditValidationsRef" Model="@EditingEntity" ValidateOnLoad="false">
                    <input type="hidden" name="ConcurrencyStamp" @bind-value="EditingEntity.ConcurrencyStamp"/>
                    <CreateOrUpdateOrganizationUnitFormShared Data="@EditingEntity"  AvailableRoles="@AvailableRoles" LH="@LH" L="@L"></CreateOrUpdateOrganizationUnitFormShared>
                </Blazorise.Validations>
            </Blazorise.ModalBody>
            <Blazorise.ModalFooter>
                <Blazorise.Button Color="Blazorise.Color.Secondary" Clicked="CloseEditModalAsync">@L["Cancel"]</Blazorise.Button>
                <SubmitButton Clicked="@UpdateEntityAsync"/>
            </Blazorise.ModalFooter>
        </Blazorise.Form>
    </Blazorise.ModalContent>
</Blazorise.Modal>
}
@* ********未来正式版，需要将此放在主题全局页面中 ***************** *@
<MessageAlert />