
@using Microsoft.Extensions.Localization
@using Volo.Abp.Application.Dtos
@using Dignite.Abp.Identity.Localization
@using Volo.Abp.AspNetCore.Components.Web.Extensibility.TableColumns
@using Volo.Abp.Identity
@using Microsoft.AspNetCore.Authorization
@using Volo.Abp.AspNetCore.Components.Web.Extensibility.EntityActions

@inherits AbpComponentBase
@inject IOrganizationUnitAppService OrganizationUnitAppService
@code {
    [Parameter] public OrganizationUnitDto OrganizationUnit { get; set; }

    protected virtual int PageSize { get; } = LimitedResultRequestDto.DefaultMaxResultCount;

    protected Modal CreateModal;
    bool HasCreatePermission = false;
    protected int CurrentPage = 1;
    protected string CurrentSorting;
    protected int? TotalCount;
    GetOrganizationUnitMembersInput GetListInput=null;
    IReadOnlyList<IdentityUserDto> Entities=new List<IdentityUserDto>();
    protected TableColumnDictionary TableColumns { get; set; }
    protected List<TableColumn> OrganizationUnitsTableColumns => TableColumns.Get<OrganizationUnitMembersComponent>();
    private SelectUsersComponent selectUserRef;
    protected EntityActionDictionary EntityActions { get; set; }


    public OrganizationUnitMembersComponent()
    {
        LocalizationResource = typeof(DigniteAbpIdentityResource);
        TableColumns = new TableColumnDictionary();
        EntityActions = new EntityActionDictionary();
        GetListInput=new GetOrganizationUnitMembersInput() { 
            SkipCount=0,
            MaxResultCount=30
        };        
    }

    protected override async Task OnInitializedAsync()
    {
        await SetPermissionsAsync();
        await SetEntityActionsAsync();
        await SetTableColumnsAsync();

        await base.OnInitializedAsync();
    }


    protected virtual async Task SetPermissionsAsync()
    {
        HasCreatePermission = await AuthorizationService.IsGrantedAsync(OrganizationUnitPermissions.OrganizationUnits.Create);  
    }


    public async Task GetEntitiesAsync()
    {
        if (OrganizationUnit==null)
        {
            Entities = new List<IdentityUserDto>();
            TotalCount = 0;
        }
        else
        {
            try
            {
                await UpdateGetListInputAsync();
                var result = await OrganizationUnitAppService.GetMembersAsync(OrganizationUnit.Id, GetListInput);
                Entities = result.Items;
                TotalCount = (int?)result.TotalCount;
            }
            catch (Exception ex)
            {
                await HandleErrorAsync(ex);
            }
        }
    }


    protected virtual Task UpdateGetListInputAsync()
    {
        if (GetListInput is ISortedResultRequest sortedResultRequestInput)
        {
            sortedResultRequestInput.Sorting = CurrentSorting;
        }

        if (GetListInput is IPagedResultRequest pagedResultRequestInput)
        {
            pagedResultRequestInput.SkipCount = (CurrentPage - 1) * PageSize;
        }

        if (GetListInput is ILimitedResultRequest limitedResultRequestInput)
        {
            limitedResultRequestInput.MaxResultCount = PageSize;
        }

        return Task.CompletedTask;
    }

    protected virtual async Task OnDataGridReadAsync(DataGridReadDataEventArgs<Volo.Abp.Identity.IdentityUserDto> e)
    {
        CurrentSorting = e.Columns
            .Where(c => c.SortDirection != Blazorise.SortDirection.None)
            .Select(c => c.Field + (c.SortDirection == Blazorise.SortDirection.Descending ? " DESC" : ""))
            .JoinAsString(",");
        CurrentPage = e.Page;

        await GetEntitiesAsync();

        await InvokeAsync(StateHasChanged);
    }

    protected virtual ValueTask SetEntityActionsAsync()
    {
        EntityActions
            .Get<OrganizationUnitMembersComponent>()
            .AddRange(new EntityAction[]
            {
                    new EntityAction
                    {
                        Text = L["Remove"],
                        Visible = (data) => HasCreatePermission,
                        Clicked = async (data) =>
                        {
                           await  OrganizationUnitAppService.RemoveMembersAsync(OrganizationUnit.Id,new Guid[]{ data.As<IdentityUserDto>().Id});
                           await GetEntitiesAsync();

                            await InvokeAsync(StateHasChanged);
                        }
                    }
            });
            
        return ValueTask.CompletedTask;
    }

    protected virtual ValueTask SetTableColumnsAsync()
    {
        OrganizationUnitsTableColumns
            .AddRange(new TableColumn[]
            {
                new TableColumn
                {
                    Title = L["UserName"],
                    Data = nameof(IdentityUserDto.UserName)
                },
                new TableColumn
                {
                    Title = L["Actions"],
                    Actions = EntityActions.Get<OrganizationUnitMembersComponent>()
                },
            });
        return ValueTask.CompletedTask;
    }

    public virtual async Task OpenCreateModalAsync()
    {
        try
        {
            selectUserRef.SelectedUsers = new List<IdentityUserDto>();
            selectUserRef.StateChanged();

            // Mapper will not notify Blazor that binded values are changed
            // so we need to notify it manually by calling StateHasChanged
            await InvokeAsync(async () =>
            {
                StateHasChanged();
                if (CreateModal != null)
                {
                    await CreateModal.Show();
                }

            });
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }

    protected virtual Task CloseCreateModalAsync()
    {
        return InvokeAsync(CreateModal.Hide);
    }

    protected virtual Task ClosingCreateModal(ModalClosingEventArgs eventArgs)
    {
        // cancel close if clicked outside of modal area
        eventArgs.Cancel = eventArgs.CloseReason == CloseReason.FocusLostClosing;

        return Task.CompletedTask;
    }

    protected virtual async Task CreateEntityAsync()
    {
        await OrganizationUnitAppService.AddMembersAsync(OrganizationUnit.Id, selectUserRef.SelectedUsers.Select(u => u.Id).ToArray());
        await GetEntitiesAsync();
        await InvokeAsync(CreateModal.Hide);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await GetEntitiesAsync();
    }
}


@* ************************* DATA GRID ************************* *@
<AbpExtensibleDataGrid TItem="Volo.Abp.Identity.IdentityUserDto"
                        Data="@Entities"
                        ReadData="@OnDataGridReadAsync"
                        TotalItems="@TotalCount"
                        ShowPager="false"
                        PageSize="@PageSize"
                        CurrentPage="@CurrentPage"
                        Columns="@OrganizationUnitsTableColumns">
</AbpExtensibleDataGrid>

@* ************************* CREATE MODAL ************************* *@
@if (HasCreatePermission)
{
    <Blazorise.Modal @ref="CreateModal" Closing="@ClosingCreateModal">
    <Blazorise.ModalContent Centered="true">
        <Blazorise.Form>
            <Blazorise.ModalHeader>
                <Blazorise.ModalTitle>@L["SelectMembers"]</Blazorise.ModalTitle>
                <Blazorise.CloseButton Clicked="CloseCreateModalAsync"/>
            </Blazorise.ModalHeader>
            <Blazorise.ModalBody>
                <SelectUsersComponent @ref="selectUserRef"></SelectUsersComponent>
            </Blazorise.ModalBody>
            <Blazorise.ModalFooter>
                <Blazorise.Button Color="@Blazorise.Color.Secondary" Clicked="CloseCreateModalAsync">@L["Cancel"]</Blazorise.Button>
                <SubmitButton Clicked="@CreateEntityAsync"/>
            </Blazorise.ModalFooter>
        </Blazorise.Form>
    </Blazorise.ModalContent>
    </Blazorise.Modal>
}
