@using Dignite.Abp.FieldCustomizing.Blazor
@using Dignite.Abp.FieldCustomizing.Fields
@using Dignite.Abp.FieldCustomizing.Fields.RichTextEditor
@inherits FieldConfigurationComponentBase

<Validation>
    <Field>
        <FieldLabel>@L["FieldDisplayName"]</FieldLabel>
        <TextEdit @bind-Text="@Definition.DisplayName" />
    </Field>
</Validation>
<Validation>
    <Field>
        <FieldLabel>@L["FieldName"]</FieldLabel>
        <TextEdit MaxLength="64" @bind-Text="@Definition.Name" />
    </Field>
</Validation>

<Validation>
    <Field>
        <FieldLabel>@L["Description"]</FieldLabel>
        <TextEdit @bind-Text="@Configuration.Description" />
    </Field>
</Validation>
<Field>
    <Check TValue="bool" @bind-Checked="@Configuration.Required">@L["IsRequired"]</Check>
</Field>
<Validation>
<Field>
    <FieldLabel>@L["DefaultValue"]</FieldLabel>
    <TextEdit @bind-Text="@Definition.DefaultValue" />
</Field>
</Validation>
<Field>
    <FieldLabel>@L["RichTextEditorMode"]</FieldLabel>
    <RadioGroup TValue="RichTextEditorMode" Name="richTextEditorMode" @bind-CheckedValue="@Configuration.Mode">
        <Radio TValue="RichTextEditorMode" Value="@RichTextEditorMode.Classic">@L["RichTextEditorMode.Classic"]</Radio>
        <Radio TValue="RichTextEditorMode" Value="@RichTextEditorMode.Document">@L["RichTextEditorMode.Document"]</Radio>
    </RadioGroup>
</Field>

@code{

    public override Type FieldProviderType => typeof(RichTextEditorFieldProvider);

    RichTextEditorConfiguration Configuration;

    protected override void OnParametersSet()
    {
        Configuration = new RichTextEditorConfiguration(Definition.Configuration);
    }
}