@using Dignite.Abp.FieldCustomizing.Blazor
@using Dignite.Abp.FieldCustomizing.Fields
@using Dignite.Abp.FieldCustomizing.Fields.RichTextEditor
@using Dignite.Abp.FieldCustomizing
@using Microsoft.AspNetCore.Components.Forms
@using Dignite.Abp.AspNetCore.Components.CkEditor
@inherits FieldControlComponentBase

    <Field Horizontal="@(!HideFieldLable)">
        <FieldLabel ColumnSize="ColumnSize.Is2.OnDesktop" hidden="@HideFieldLable">@CustomizeField.Definition.DisplayName</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is10.OnDesktop">      
            <EditForm Model="@CustomizeField.Entity">
                <CkEditorBlazor UrlToPostImage="/api/file-management/files/save/Cms.RichTextEditorPic"
                    Value="@CustomizeField.Entity.GetField(CustomizeField.Definition.Name)?.ToString()" 
                    ValueChanged="@OnValueChanged"
                    ValueExpression="@(() => Configuration.Description )" >
                </CkEditorBlazor>
            </EditForm>
            <FieldHelp>@Configuration.Description</FieldHelp>
        </FieldBody>
    </Field>


@code{
    public override Type FieldProviderType => typeof(RichTextEditorFieldProvider);

    public RichTextEditorConfiguration Configuration { get; set; }

    protected override void OnParametersSet()
    {
        Configuration = new RichTextEditorConfiguration(CustomizeField.Definition.Configuration);
    }

    void ValidateIsRequired( ValidatorEventArgs e )
    {
        var value = Convert.ToString( e.Value );
        if(Configuration.Required)
        {
            e.Status = string.IsNullOrWhiteSpace(value) ? ValidationStatus.Error : ValidationStatus.Success;
        }
    }

    Task OnValueChanged( string value )
    {
        CustomizeField.Entity.SetField(CustomizeField.Definition.Name, value);

        return Task.CompletedTask;
    }

}