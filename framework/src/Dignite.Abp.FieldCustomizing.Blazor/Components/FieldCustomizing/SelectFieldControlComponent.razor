@using Dignite.Abp.FieldCustomizing.Blazor
@using Dignite.Abp.FieldCustomizing.Fields
@using Dignite.Abp.FieldCustomizing.Fields.Select
@using Dignite.Abp.FieldCustomizing
@inherits FieldControlComponentBase

<Validation Validator="@ValidateIsRequired">
    <Field Horizontal="@(!HideFieldLable)">
        <FieldLabel ColumnSize="ColumnSize.Is2.OnDesktop" hidden="@HideFieldLable">@CustomizeField.Definition.DisplayName</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is10.OnDesktop">
            @if (Configuration.Multiple)
            { 
            <Select TValue="string" SelectedValues="@Values" SelectedValuesChanged="@OnSelectedValuesChanged" Multiple="true">
                @if (!Configuration.NullText.IsNullOrEmpty())
                {
                    <SelectItem Value="@Configuration.NullText">@Configuration.NullText</SelectItem>
                }
                @foreach(var option in Configuration.Options)
                {
                    <SelectItem Value="@option.Value">@option.Text</SelectItem>
                }
            </Select>
            }
            else
            {
            <Select TValue="string" SelectedValue="@(Values.Any()?Values[0]:Configuration.NullText)" SelectedValueChanged="@OnSelectedValueChanged">
                @if (!Configuration.NullText.IsNullOrEmpty())
                {
                    <SelectItem Value="@Configuration.NullText">@Configuration.NullText</SelectItem>
                }
                @foreach(var option in Configuration.Options)
                {
                    <SelectItem Value="@option.Value">@option.Text</SelectItem>
                }
            </Select>
            }
            <FieldHelp>@Configuration.Description</FieldHelp>
        </FieldBody>
    </Field>
</Validation>


@code{
    public override Type FieldProviderType => typeof(SelectFieldProvider);

    public SelectConfiguration Configuration { get; set; }

    private List<string> Values = new List<string>();

    protected override void OnParametersSet()
    {
        Configuration = new SelectConfiguration(CustomizeField.Definition.Configuration);

        //
        if (!Values.Any())
        {
            if (Configuration.Options.Any(o => o.Selected))
            {
                Values = Configuration.Options.Where(o => o.Selected).Select(o => o.Value).ToList();
            }
        }
    }

    protected override void OnInitialized()
    {
        var values = CustomizeField.Entity.GetField(CustomizeField.Definition.Name, null);
        if (values != null)
        {
            try
            {
                Values = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(values.ToString());

                CustomizeField.Entity.SetField(CustomizeField.Definition.Name, Values);
            }
            catch
            { }
        }
        base.OnInitialized();
    }

    void ValidateIsRequired( ValidatorEventArgs e )
    {
        if(Configuration.Required)
        {
            e.Status = (e.Value == null || e.Value.ToString()==Configuration.NullText) ? ValidationStatus.Error : ValidationStatus.Success;
        }
    }

    Task OnSelectedValueChanged(string value )
    {
        Values.Clear();
        Values.Add(value);
        CustomizeField.Entity.SetField(CustomizeField.Definition.Name, Values);

        return Task.CompletedTask;
    }

    //
    Task OnSelectedValuesChanged(IReadOnlyList<string> values )
    {
        Values = values.ToList();
        CustomizeField.Entity.SetField(CustomizeField.Definition.Name, Values);

        return Task.CompletedTask;
    }
}