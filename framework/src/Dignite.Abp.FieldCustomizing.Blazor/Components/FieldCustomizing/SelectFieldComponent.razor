@using Dignite.Abp.FieldCustomizing.Blazor
@using Dignite.Abp.FieldCustomizing.Fields
@using Dignite.Abp.FieldCustomizing.Fields.Select
@using Dignite.Abp.FieldCustomizing
@inherits FieldComponentBase

    <Field Horizontal="@(!HideFieldLable)">
        <FieldLabel ColumnSize="ColumnSize.Is2.OnDesktop" hidden="@HideFieldLable">@CustomizeField.Definition.DisplayName</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is10.OnDesktop">
            @if (Values != null)
            {
                @Configuration.Options.Where(o=>Values.Contains( o.Value)).Select(o=>o.Text).JoinAsString(",")
            }
    </FieldBody>
    </Field>


@code{
    public override Type FieldProviderType => typeof(SelectFieldProvider);

    public SelectConfiguration Configuration { get; set; }
    private IReadOnlyList<string> Values = null;

    protected override void OnParametersSet()
    {
        Configuration = new SelectConfiguration(CustomizeField.Definition.Configuration);
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (CustomizeField.Entity.GetField(CustomizeField.Definition.Name, null) != null)
        {
            var values = CustomizeField.Entity.GetField(CustomizeField.Definition.Name, null);
            if (values != null)
            {
                try
                {
                    Values = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(values.ToString());
                }
                catch
                { }
            }
        }
    }

}