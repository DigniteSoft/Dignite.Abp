@using Dignite.Abp.FieldCustomizing.Blazor
@using Dignite.Abp.FieldCustomizing.FieldControls
@using Dignite.Abp.FieldCustomizing.FieldControls.RichTextEditor
@inherits FieldControlConfigurationComponentBase

<Validation>
    <Field>
        <FieldLabel>@L["DisplayName:Name"]</FieldLabel>
        <TextEdit MaxLength="64" @bind-Text="@Definition.Name" />
    </Field>
</Validation>

<Validation>
    <Field>
        <FieldLabel>@L["DisplayName:DisplayName"]</FieldLabel>
        <TextEdit @bind-Text="@Definition.DisplayName" />
    </Field>
</Validation>
<Validation>
    <Field>
        <FieldLabel>@L["DisplayName:Description"]</FieldLabel>
        <TextEdit @bind-Text="@Configuration.Description" />
    </Field>
</Validation>
<Field>
    <Check TValue="bool" @bind-Checked="@Configuration.Required">@L["DisplayName:IsRequired"]</Check>
</Field>
<Validation>
<Field>
    <FieldLabel>@L["DisplayName:DefaultValue"]</FieldLabel>
    <TextEdit @bind-Text="@Definition.DefaultValue" />
</Field>
</Validation>
<Field>
    <FieldLabel>@L["DisplayName:RichTextEditorMode"]</FieldLabel>
    <RadioGroup TValue="RichTextEditorMode" Name="richTextEditorMode" @bind-CheckedValue="@Configuration.Mode">
        <Radio TValue="RichTextEditorMode" Value="@RichTextEditorMode.Classic">@L["DisplayName:RichTextEditorMode.Classic"]</Radio>
        <Radio TValue="RichTextEditorMode" Value="@RichTextEditorMode.Document">@L["DisplayName:RichTextEditorMode.Document"]</Radio>
    </RadioGroup>
</Field>

@code{

    public override Type FieldControlProviderType => typeof(RichTextEditorFieldControlProvider);

    RichTextEditorConfiguration Configuration;

    protected override void OnParametersSet()
    {
        Configuration = new RichTextEditorConfiguration(Definition.Configuration);
    }
}