@using Dignite.Abp.FieldCustomizing.Blazor
@using Dignite.Abp.FieldCustomizing.Fields
@using Dignite.Abp.FieldCustomizing.Fields.Upload
@using Dignite.Abp.FieldCustomizing
@using Microsoft.AspNetCore.Components.Forms
@inherits FieldComponentBase

    <Field Horizontal="@(!HideFieldLable)">
        <FieldLabel ColumnSize="ColumnSize.Is2.OnDesktop" hidden="@HideFieldLable">@CustomizeField.Definition.DisplayName</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is10.OnDesktop">
            @if (Files.Any())
            {            
                <Table>
                    <TableHeader>
                        <Blazorise.TableRow>
                            <TableHeaderCell>文件名</TableHeaderCell>
                            <TableHeaderCell>文件大小</TableHeaderCell>
                            <TableHeaderCell>下载</TableHeaderCell>
                        </Blazorise.TableRow>
                    </TableHeader>
                    <TableBody>
                        @foreach(var file in Files)
                        {
                            <Blazorise.TableRow>
                                <TableRowCell>@file.FileName</TableRowCell>
                                <TableRowCell>@file.BinarySize</TableRowCell>
                                <TableRowCell><a href="@($"/api/file-management/files/{file.ContainerName}/{file.BlobName}")" target="_blank"></a></TableRowCell>
                            </Blazorise.TableRow>
                        }
                    </TableBody>
                </Table>
            }
    </FieldBody>
    </Field>


@code{
    public override Type FieldProviderType => typeof(UploadFieldProvider);

    public UploadConfiguration Configuration { get; set; }
    public List<File> Files = new List<File>();

    protected override void OnParametersSet()
    {
        Configuration = new UploadConfiguration(CustomizeField.Definition.Configuration);
    }
    
    protected override void OnInitialized()
    {
        var value = CustomizeField.Entity.GetField(CustomizeField.Definition.Name, null);
        if (value != null)
        {
            Files = Newtonsoft.Json.JsonConvert.DeserializeObject<List<File>>(value.ToString());
        }

        base.OnInitialized();
    }
}